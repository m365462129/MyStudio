syntax = "proto2";
package Game;

/**
 * 玩家信息
 */
message Player {
    optional int32 player_id = 1; //玩家ID
    optional int32 player_pos = 2; //玩家位置
    optional bool warning_flag = 3; //是否报警 手牌<= 7张时报警
    optional bool is_offline = 4; //是否掉线
    optional bool is_owner = 5; //是否为房主
    optional bool is_ready = 6; //是否准备
    optional int32 score = 7; //积分
    optional int32 win_cnt = 8; //胜利次数
    optional int32 lost_cnt = 9; //失败次数
    optional int32 bomb_cnt = 10; //炸弹数量
    optional int32 rest_card_cnt = 11; //剩余牌数量
    optional int32 rank = 13; //名次 从1至4分别为头游、二游、三游、末游
    optional int32 pickedPoints = 14; //捡分值，2v2才有捡分
    optional int32 round_discard_cnt=15; //本轮出牌情况: -1 还未轮到; 0 已过牌; 其他表示出牌数量
    repeated int32 round_discard_info=16; //当前出牌
    repeated int32 round_discard_logic_info=17; //当前出牌
}

/**
 * 游戏信息，
 * 单播，登录或者断线重连时发送
 */
message GameInfo {
    optional int32 time = 1; //服务器时间戳
    optional int32 room_id = 2; //房间号
    optional int32 state = 3; //游戏状态，0:表示牌局未开始; 1:确定对战模式(1v3,2v2)中; 2:表示牌局进行(打牌)中; 3:牌局结束处理结算
    optional int32 next_player_id = 4; //下一个需要独牌或出牌的玩家 为0时表示没人需要出牌
    repeated Player players = 5; //玩家信息列表
    optional int32 currentRound = 6; //当前游戏局数
    optional int32 totalRound = 7; //游戏总局数
    optional int32 desk_player_id = 8; //上一个已经出牌的玩家
    repeated int32 desk_cards = 9; //上一个已经出牌的玩家所出的牌
    repeated int32 desk_logic_cards=10; //上一个已经出牌的玩家所出的牌(宝牌替换结果)
    repeated int32 cards = 11; //手牌
    optional bool isHandingCards = 12;  //是否正在发牌，用于客户端播放发牌动效
    repeated int32 magicCards = 13;  //癞子牌列表
    optional int32 battleMode = 14; //对战模式，1:独牌模式（1v3）; 2:搭挡模式（2v2）
    repeated int32 team1Players = 15; //1队玩家ID列表，独牌模式下独牌玩家永远在team1Players列表中
    repeated int32 team2Players = 16; //2队玩家ID列表
    optional int32 teamCard = 17; //玩家组队使用的牌, 2v2模式有效
    optional int32 reconn_player_id = 18; //断线重连的玩家ID
    optional int32 discard_serial_no = 19; //出牌序列号
    optional int32 loopPickedPoints = 20; //出牌轮累计的总捡分（5、10、K）
    optional int32 bankerId = 21; //庄家ID
    optional bool teamCardAppeared = 22;  //组队牌是否出现
}

/**
 * 结算信息,
 * 广播, 一把打玩发送
 */
message SettleInfo {
    message Player {
        optional int32 player_id = 1; //玩家ID
        optional int32 score = 2; //总积分
        optional int32 current_score = 3; //本局积分
        optional int32 pickedPoints = 4; //捡分值，2v2才有捡分
        optional int32 remain_card_cnt = 5; //剩余牌数
        optional int32 win_cnt = 6; //胜利次数
        optional int32 lost_cnt = 7; //失败次数
        optional int32 bomb_cnt = 8; //总炸弹数
        optional int32 current_bomb_cnt = 9; //本局炸弹数
        optional string played_cards = 10;
        optional string cards = 11;
        optional int32 rank = 12; //出完牌名次，从1至4分别为头游、二游、三游、末游
        optional int32 multiple = 13;  //胜利玩家算分倍数
        optional int32 teamPickedPoints = 14; //团队捡分值，2v2才有捡分
        optional int32 no1_times = 15;      //头游次数
    }
    repeated Player players = 1;
    optional int32 round = 2; //第几局数
    optional int32 totalRound = 3; //总游戏局数
    optional int32 startTime = 4; //牌局开始时间戳(秒)
    optional int32 endTime = 5; //牌局结束时间戳(秒)
    optional bool isSummarySettle = 6; //是否大结 最后一局结束时该标志为true   
    optional int32 free_sponsor = 7; //解散房间发起者（正常结束为空）
    optional int32 reconn_player_id = 8; //断线重连的玩家ID
}

/**
 * 玩家出牌请求
 */
 message DiscardReq {
    optional bool is_passed = 1; //是否要不起，即过牌
    repeated int32 cards = 2; //当前出牌牌，如果过牌则此处为空数组
    repeated int32 logic_cards=3;//宝牌变换后的结果，非宝牌位置为0，与cards位置一一对应 
    optional int32 discard_serial_no = 4; //出牌序列号
}

/**
 * 玩家出牌响应
 * 单播 收到玩家出牌信息后
 */
 message DiscardRsp {
    optional bool is_ok = 1; //是否出牌成功 
    optional string desc = 2; //错误描述信息 牌型错误、未轮到玩家出牌、不能过牌
    repeated int32 cards = 3; //当前手牌
}

/**
 * 下行的出牌通知,
 * 广播, 收到玩家出牌信息后，如果出牌合法，则广播该通知
 */
message DiscardNotify {
    optional int32 player_id = 1; //出牌的玩家ID
    optional bool is_passed = 2; //是否过牌
    repeated int32 cards = 3; //当前出牌情况
    repeated int32 logic_cards=4; //宝牌变换后的结果，非宝牌位置为0，与cards位置一一对应 
    optional bool warning_flag = 5; //警告标志 表示该玩家的手牌已经<=7张
    optional int32 next_player_id = 6; //下一个需要出牌的玩家
    optional int32 rest_card_cnt = 7; //当前玩家剩余牌数，为-1时表示保密，报警后不能为-1，其他时候只有发给对家时不为-1
    optional bool is_first_pattern = 8; //下一个玩家是否首发
    optional int32 discard_serial_no = 9; //出牌序列号
    optional int32 teamCard = 10; //玩家组队使用的牌——“叫牌”, 当打出“叫牌”时有值
    optional int32 rank = 11;     //出完牌名次，从1至4分别为头游、二游、三游、末游
    optional int32 loopPickedPoints = 12; //出牌轮累计的总捡分（5、10、K）
}

/**
* 独牌请求
*/
message FightAloneReq {
    optional int32 playerId = 1;  //独牌请求玩家
    optional bool needFightAlone = 2;  //是否独牌
}

/**
* 独牌响应
*/
message FightAloneRsp {
	optional bool ok = 1;  //独牌请求是否成功
	optional string msg = 2;  //响应信息，出错时为错误信息
}

/**
* 独牌通知
*/
message FightAloneNotify {
    optional int32 fightAlonePlayer = 1;  //独牌请求玩家
    optional bool isFightAlone = 2;  //是否独牌
    optional int32 nextPlayerId = 3;  //下一个需要操作（独牌或出牌）的玩家
    optional int32 battleMode = 4; //对战模式，0: 未确定，独牌处理中；1:独牌模式（1v3）; 2:搭挡模式（2v2）
    optional int32 teamCard = 5; //玩家组队使用的牌, 2v2模式有效
}

/**
* 捡分通知
*/
message PointsPickedNotify {
    required int32 playerId = 1;  //捡分玩家ID
    required int32 totalPoints = 2;  //玩家在该局中总捡分值
    optional int32 points = 3;   //该次捡分值
}