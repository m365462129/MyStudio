//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BestHTTP_HTTPResponseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BestHTTP.HTTPResponse), typeof(System.Object));
		L.RegFunction("GetHeaderValues", GetHeaderValues);
		L.RegFunction("GetFirstHeaderValue", GetFirstHeaderValue);
		L.RegFunction("HasHeaderWithValue", HasHeaderWithValue);
		L.RegFunction("HasHeader", HasHeader);
		L.RegFunction("GetRange", GetRange);
		L.RegFunction("ReadTo", ReadTo);
		L.RegFunction("NoTrimReadTo", NoTrimReadTo);
		L.RegFunction("GetStreamedFragments", GetStreamedFragments);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("MinBufferSize", 4096);
		L.RegVar("VersionMajor", get_VersionMajor, null);
		L.RegVar("VersionMinor", get_VersionMinor, null);
		L.RegVar("StatusCode", get_StatusCode, null);
		L.RegVar("IsSuccess", get_IsSuccess, null);
		L.RegVar("Message", get_Message, null);
		L.RegVar("IsStreamed", get_IsStreamed, null);
		L.RegVar("IsStreamingFinished", get_IsStreamingFinished, null);
		L.RegVar("Headers", get_Headers, null);
		L.RegVar("Data", get_Data, null);
		L.RegVar("IsUpgraded", get_IsUpgraded, null);
		L.RegVar("DataAsText", get_DataAsText, null);
		L.RegVar("DataAsTexture2D", get_DataAsTexture2D, null);
		L.RegVar("IsClosedManually", get_IsClosedManually, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeaderValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<string> o = obj.GetHeaderValues(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFirstHeaderValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetFirstHeaderValue(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasHeaderWithValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.HasHeaderWithValue(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasHeader(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			BestHTTP.HTTPRange o = obj.GetRange();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 2);
				string o = BestHTTP.HTTPResponse.ReadTo(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
				byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 2);
				byte arg2 = (byte)LuaDLL.luaL_checknumber(L, 3);
				string o = BestHTTP.HTTPResponse.ReadTo(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BestHTTP.HTTPResponse.ReadTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NoTrimReadTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 1);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 2);
			byte arg2 = (byte)LuaDLL.luaL_checknumber(L, 3);
			string o = BestHTTP.HTTPResponse.NoTrimReadTo(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStreamedFragments(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			System.Collections.Generic.List<byte[]> o = obj.GetStreamedFragments();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)ToLua.CheckObject<BestHTTP.HTTPResponse>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionMajor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			int ret = obj.VersionMajor;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VersionMajor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionMinor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			int ret = obj.VersionMinor;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VersionMinor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StatusCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			int ret = obj.StatusCode;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSuccess(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			bool ret = obj.IsSuccess;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSuccess on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Message(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			string ret = obj.Message;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Message on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStreamed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			bool ret = obj.IsStreamed;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsStreamed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStreamingFinished(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			bool ret = obj.IsStreamingFinished;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsStreamingFinished on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Headers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<string>> ret = obj.Headers;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Headers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			byte[] ret = obj.Data;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsUpgraded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			bool ret = obj.IsUpgraded;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsUpgraded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataAsText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			string ret = obj.DataAsText;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataAsText on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataAsTexture2D(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			UnityEngine.Texture2D ret = obj.DataAsTexture2D;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataAsTexture2D on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsClosedManually(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPResponse obj = (BestHTTP.HTTPResponse)o;
			bool ret = obj.IsClosedManually;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsClosedManually on a nil value");
		}
	}
}

