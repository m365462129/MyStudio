//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DNet_BufferWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DNet.Buffer), typeof(System.Object));
		L.RegFunction("SetMessageName", SetMessageName);
		L.RegFunction("Create", Create);
		L.RegFunction("Recycle", Recycle);
		L.RegFunction("Clear", Clear);
		L.RegFunction("WriteUShort", WriteUShort);
		L.RegFunction("WriteUInt", WriteUInt);
		L.RegFunction("WriteInt", WriteInt);
		L.RegFunction("WriteLong", WriteLong);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("EndWrite", EndWrite);
		L.RegFunction("WriteBufferMsgProtolType1", WriteBufferMsgProtolType1);
		L.RegFunction("WriteBufferMsgProtolType2", WriteBufferMsgProtolType2);
		L.RegFunction("WriteBufferMsgProtolType3", WriteBufferMsgProtolType3);
		L.RegFunction("BeginWriting", BeginWriting);
		L.RegFunction("BeginReading", BeginReading);
		L.RegFunction("PeekByte", PeekByte);
		L.RegFunction("PeekInt16", PeekInt16);
		L.RegFunction("PeekUInt16", PeekUInt16);
		L.RegFunction("PeekUInt32", PeekUInt32);
		L.RegFunction("PeekInt", PeekInt);
		L.RegFunction("GetPlayBackInfo", GetPlayBackInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("messageName", get_messageName, set_messageName);
		L.RegVar("msgProtolType", get_msgProtolType, set_msgProtolType);
		L.RegVar("msgRetCode", get_msgRetCode, set_msgRetCode);
		L.RegVar("size", get_size, null);
		L.RegVar("position", get_position, set_position);
		L.RegVar("buffer", get_buffer, null);
		L.RegVar("dataBuffer", get_dataBuffer, null);
		L.RegVar("recycleQueue", get_recycleQueue, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMessageName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			CDecompress arg0 = (CDecompress)ToLua.CheckObject<CDecompress>(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetMessageName(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			DNet.Buffer o = DNet.Buffer.Create(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Recycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			bool o = obj.Recycle();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.WriteBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			obj.EndWrite();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBufferMsgProtolType1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.WriteBufferMsgProtolType1(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBufferMsgProtolType2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.WriteBufferMsgProtolType2(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBufferMsgProtolType3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.WriteBufferMsgProtolType3(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginWriting(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			System.IO.BinaryWriter o = obj.BeginWriting(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginReading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			System.IO.BinaryReader o = obj.BeginReading();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PeekByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.PeekByte(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PeekInt16(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int o = obj.PeekInt16(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				int o = obj.PeekInt16(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DNet.Buffer.PeekInt16");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PeekUInt16(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				ushort o = obj.PeekUInt16(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				ushort o = obj.PeekUInt16(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DNet.Buffer.PeekUInt16");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PeekUInt32(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				uint o = obj.PeekUInt32(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				uint o = obj.PeekUInt32(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DNet.Buffer.PeekUInt32");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PeekInt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int o = obj.PeekInt(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				int o = obj.PeekInt(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DNet.Buffer.PeekInt");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayBackInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.Buffer obj = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			DNet.VideoData o = obj.GetPlayBackInfo(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_messageName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			string ret = obj.messageName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index messageName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_msgProtolType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int ret = obj.msgProtolType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgProtolType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_msgRetCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int ret = obj.msgRetCode;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgRetCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int ret = obj.size;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int ret = obj.position;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_buffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			byte[] ret = obj.buffer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index buffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dataBuffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			byte[] ret = obj.dataBuffer;
			LuaDLL.tolua_pushlstring(L, ret, ret.Length);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dataBuffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recycleQueue(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, DNet.Buffer.recycleQueue);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_messageName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.messageName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index messageName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_msgProtolType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.msgProtolType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgProtolType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_msgRetCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.msgRetCode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgRetCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.Buffer obj = (DNet.Buffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}
}

