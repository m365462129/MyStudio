//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DNet_GameWebSocketClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DNet.GameWebSocketClient), typeof(System.Object));
		L.RegFunction("Connect", Connect);
		L.RegFunction("ResetMsgDataDecompresser", ResetMsgDataDecompresser);
		L.RegFunction("SendBuffer", SendBuffer);
		L.RegFunction("SendMessage", SendMessage);
		L.RegFunction("SendBinary", SendBinary);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("Disconnect", Disconnect);
		L.RegFunction("ForceDisconnect", ForceDisconnect);
		L.RegFunction("CloseWebSocket", CloseWebSocket);
		L.RegFunction("CloseWebSocketWithMsg", CloseWebSocketWithMsg);
		L.RegFunction("New", _CreateDNet_GameWebSocketClient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("onEventChangeFn", get_onEventChangeFn, set_onEventChangeFn);
		L.RegVar("onReceiveMessageFn", get_onReceiveMessageFn, set_onReceiveMessageFn);
		L.RegVar("onReceiveTextMessageFn", get_onReceiveTextMessageFn, set_onReceiveTextMessageFn);
		L.RegVar("clientName", get_clientName, set_clientName);
		L.RegVar("msgProtocolType", get_msgProtocolType, set_msgProtocolType);
		L.RegVar("needDecompressMsgName", get_needDecompressMsgName, set_needDecompressMsgName);
		L.RegVar("heartMsgId", get_heartMsgId, set_heartMsgId);
		L.RegVar("packetLenMin", get_packetLenMin, null);
		L.RegVar("packetHeadLenOffest", get_packetHeadLenOffest, null);
		L.RegVar("heartSendInIntervalTime", get_heartSendInIntervalTime, set_heartSendInIntervalTime);
		L.RegVar("canSendHeartPack", get_canSendHeartPack, set_canSendHeartPack);
		L.RegVar("webSocketOpen", get_webSocketOpen, null);
		L.RegVar("PingFrequnecy", get_PingFrequnecy, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDNet_GameWebSocketClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				DNet.GameWebSocketClient obj = new DNet.GameWebSocketClient(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DNet.GameWebSocketClient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Connect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetMsgDataDecompresser(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			obj.ResetMsgDataDecompresser();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			DNet.Buffer arg0 = (DNet.Buffer)ToLua.CheckObject<DNet.Buffer>(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SendBuffer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SendMessage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendBinary(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.SendBinary(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			obj.Disconnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceDisconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ForceDisconnect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseWebSocket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			obj.CloseWebSocket();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseWebSocketWithMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)ToLua.CheckObject<DNet.GameWebSocketClient>(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.CloseWebSocketWithMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEventChangeFn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			LuaInterface.LuaFunction ret = obj.onEventChangeFn;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onEventChangeFn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onReceiveMessageFn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			LuaInterface.LuaFunction ret = obj.onReceiveMessageFn;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onReceiveMessageFn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onReceiveTextMessageFn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			LuaInterface.LuaFunction ret = obj.onReceiveTextMessageFn;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onReceiveTextMessageFn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clientName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			string ret = obj.clientName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clientName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_msgProtocolType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			int ret = obj.msgProtocolType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgProtocolType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_needDecompressMsgName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			string ret = obj.needDecompressMsgName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index needDecompressMsgName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heartMsgId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			string ret = obj.heartMsgId;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heartMsgId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_packetLenMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			int ret = obj.packetLenMin;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index packetLenMin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_packetHeadLenOffest(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			int ret = obj.packetHeadLenOffest;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index packetHeadLenOffest on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heartSendInIntervalTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			int ret = obj.heartSendInIntervalTime;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heartSendInIntervalTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canSendHeartPack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			bool ret = obj.canSendHeartPack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canSendHeartPack on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_webSocketOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			bool ret = obj.webSocketOpen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index webSocketOpen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PingFrequnecy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			System.TimeSpan ret = obj.PingFrequnecy;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PingFrequnecy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEventChangeFn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onEventChangeFn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onEventChangeFn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onReceiveMessageFn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onReceiveMessageFn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onReceiveMessageFn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onReceiveTextMessageFn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onReceiveTextMessageFn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onReceiveTextMessageFn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clientName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.clientName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clientName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_msgProtocolType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.msgProtocolType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgProtocolType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_needDecompressMsgName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.needDecompressMsgName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index needDecompressMsgName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heartMsgId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.heartMsgId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heartMsgId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heartSendInIntervalTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.heartSendInIntervalTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heartSendInIntervalTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_canSendHeartPack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DNet.GameWebSocketClient obj = (DNet.GameWebSocketClient)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.canSendHeartPack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canSendHeartPack on a nil value");
		}
	}
}

