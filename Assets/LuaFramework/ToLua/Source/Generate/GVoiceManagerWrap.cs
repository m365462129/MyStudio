//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GVoiceManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GVoiceManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Init", Init);
		L.RegFunction("SetEventListener", SetEventListener);
		L.RegFunction("ClearEventListener", ClearEventListener);
		L.RegFunction("StartRecording", StartRecording);
		L.RegFunction("StopRecording", StopRecording);
		L.RegFunction("UploadRecordedFile", UploadRecordedFile);
		L.RegFunction("DownloadRecordedFile", DownloadRecordedFile);
		L.RegFunction("PlayRecordedFile", PlayRecordedFile);
		L.RegFunction("StopPlayFile", StopPlayFile);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("onAction", get_onAction, set_onAction);
		L.RegVar("instance", get_instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.Init(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEventListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
				System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
				System.Action<string,string> arg1 = (System.Action<string,string>)ToLua.CheckDelegate<System.Action<string,string>>(L, 3);
				System.Action<string> arg2 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 4);
				obj.SetEventListener(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
				System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
				System.Action<string,string> arg1 = (System.Action<string,string>)ToLua.CheckDelegate<System.Action<string,string>>(L, 3);
				System.Action<string> arg2 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 4);
				System.Action<string> arg3 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 5);
				obj.SetEventListener(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GVoiceManager.SetEventListener");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			obj.ClearEventListener();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartRecording(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.StartRecording(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopRecording(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			obj.StopRecording();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UploadRecordedFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.UploadRecordedFile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadRecordedFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.DownloadRecordedFile(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayRecordedFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.PlayRecordedFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopPlayFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GVoiceManager obj = (GVoiceManager)ToLua.CheckObject<GVoiceManager>(L, 1);
			obj.StopPlayFile();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GVoiceManager obj = (GVoiceManager)o;
			LuaInterface.LuaFunction ret = obj.onAction;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GVoiceManager.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GVoiceManager obj = (GVoiceManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.onAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onAction on a nil value");
		}
	}
}

