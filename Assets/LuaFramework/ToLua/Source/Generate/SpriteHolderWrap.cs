//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SpriteHolderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SpriteHolder), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("FindSpriteByName", FindSpriteByName);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("assetData", get_assetData, set_assetData);
		L.RegVar("useAssetName", get_useAssetName, set_useAssetName);
		L.RegVar("injections", get_injections, set_injections);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindSpriteByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SpriteHolder obj = (SpriteHolder)ToLua.CheckObject<SpriteHolder>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.FindSpriteByName(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SpriteHolder obj = (SpriteHolder)o;
			CustomAssetHolder.AssetData ret = obj.assetData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useAssetName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SpriteHolder obj = (SpriteHolder)o;
			bool ret = obj.useAssetName;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useAssetName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_injections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SpriteHolder obj = (SpriteHolder)o;
			System.Collections.Generic.List<SpriteHolder.Injection> ret = obj.injections;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index injections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SpriteHolder obj = (SpriteHolder)o;
			CustomAssetHolder.AssetData arg0 = (CustomAssetHolder.AssetData)ToLua.CheckObject<CustomAssetHolder.AssetData>(L, 2);
			obj.assetData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useAssetName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SpriteHolder obj = (SpriteHolder)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useAssetName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useAssetName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_injections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SpriteHolder obj = (SpriteHolder)o;
			System.Collections.Generic.List<SpriteHolder.Injection> arg0 = (System.Collections.Generic.List<SpriteHolder.Injection>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<SpriteHolder.Injection>));
			obj.injections = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index injections on a nil value");
		}
	}
}

