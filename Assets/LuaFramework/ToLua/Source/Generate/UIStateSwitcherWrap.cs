//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIStateSwitcherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIStateSwitcher), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SwitchState", SwitchState);
		L.RegFunction("SwitchStateUsingID", SwitchStateUsingID);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("states", get_states, set_states);
		L.RegVar("Targets", get_Targets, set_Targets);
		L.RegVar("CurrentStateID", get_CurrentStateID, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIStateSwitcher obj = (UIStateSwitcher)ToLua.CheckObject<UIStateSwitcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SwitchState(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchStateUsingID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIStateSwitcher obj = (UIStateSwitcher)ToLua.CheckObject<UIStateSwitcher>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SwitchStateUsingID(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_states(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIStateSwitcher obj = (UIStateSwitcher)o;
			System.Collections.Generic.List<UIStateSwitcher.State> ret = obj.states;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index states on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Targets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIStateSwitcher obj = (UIStateSwitcher)o;
			System.Collections.Generic.List<UnityEngine.GameObject> ret = obj.Targets;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Targets on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentStateID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIStateSwitcher obj = (UIStateSwitcher)o;
			string ret = obj.CurrentStateID;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentStateID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_states(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIStateSwitcher obj = (UIStateSwitcher)o;
			System.Collections.Generic.List<UIStateSwitcher.State> arg0 = (System.Collections.Generic.List<UIStateSwitcher.State>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UIStateSwitcher.State>));
			obj.states = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index states on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Targets(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIStateSwitcher obj = (UIStateSwitcher)o;
			System.Collections.Generic.List<UnityEngine.GameObject> arg0 = (System.Collections.Generic.List<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.GameObject>));
			obj.Targets = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Targets on a nil value");
		}
	}
}

