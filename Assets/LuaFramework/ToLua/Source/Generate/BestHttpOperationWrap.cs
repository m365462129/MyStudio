//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BestHttpOperationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BestHttpOperation), typeof(System.Object));
		L.RegFunction("Subscribe", Subscribe);
		L.RegFunction("AddBinaryData", AddBinaryData);
		L.RegFunction("AddField", AddField);
		L.RegFunction("SetUploadStream", SetUploadStream);
		L.RegFunction("SetStreamData", SetStreamData);
		L.RegFunction("Start", Start);
		L.RegFunction("Abort", Abort);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("httpReq", get_httpReq, null);
		L.RegVar("httpRsp", get_httpRsp, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Subscribe(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
				System.Action<BestHttpOperation> arg0 = (System.Action<BestHttpOperation>)ToLua.CheckDelegate<System.Action<BestHttpOperation>>(L, 2);
				BestHttpOperation o = obj.Subscribe(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
				System.Action<BestHttpOperation> arg0 = (System.Action<BestHttpOperation>)ToLua.CheckDelegate<System.Action<BestHttpOperation>>(L, 2);
				System.Action<BestHttpOperation> arg1 = (System.Action<BestHttpOperation>)ToLua.CheckDelegate<System.Action<BestHttpOperation>>(L, 3);
				BestHttpOperation o = obj.Subscribe(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
				System.Action<BestHttpOperation> arg0 = (System.Action<BestHttpOperation>)ToLua.CheckDelegate<System.Action<BestHttpOperation>>(L, 2);
				System.Action<BestHttpOperation> arg1 = (System.Action<BestHttpOperation>)ToLua.CheckDelegate<System.Action<BestHttpOperation>>(L, 3);
				System.Action<string> arg2 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 4);
				BestHttpOperation o = obj.Subscribe(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BestHttpOperation.Subscribe");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBinaryData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			BestHttpOperation o = obj.AddBinaryData(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			BestHttpOperation o = obj.AddField(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUploadStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			BestHttpOperation o = obj.SetUploadStream(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStreamData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			BestHttpOperation o = obj.SetStreamData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
			BestHttpOperation o = obj.Start();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Abort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHttpOperation obj = (BestHttpOperation)ToLua.CheckObject<BestHttpOperation>(L, 1);
			BestHttpOperation o = obj.Abort();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_httpReq(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHttpOperation obj = (BestHttpOperation)o;
			BestHTTP.HTTPRequest ret = obj.httpReq;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index httpReq on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_httpRsp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHttpOperation obj = (BestHttpOperation)o;
			BestHTTP.HTTPResponse ret = obj.httpRsp;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index httpRsp on a nil value");
		}
	}
}

