//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SingletonProject_GameAsset_AssetBundleManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SingletonProject<GameAsset.AssetBundleManager>), typeof(System.Object), "SingletonProject_GameAsset_AssetBundleManager");
		L.RegFunction("New", New);
		L.RegFunction("New", _CreateSingletonProject_GameAsset_AssetBundleManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("instance", get_instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSingletonProject_GameAsset_AssetBundleManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SingletonProject<GameAsset.AssetBundleManager> obj = new SingletonProject<GameAsset.AssetBundleManager>();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SingletonProject<GameAsset.AssetBundleManager>.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int New(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SingletonProject<GameAsset.AssetBundleManager>.New();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, SingletonProject<GameAsset.AssetBundleManager>.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

