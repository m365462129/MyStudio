//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimeEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimeEvent), typeof(System.Object));
		L.RegFunction("SetIntervalTime", SetIntervalTime);
		L.RegFunction("ResetInterval", ResetInterval);
		L.RegFunction("SetPause", SetPause);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("OnComplete", OnComplete);
		L.RegFunction("OnKill", OnKill);
		L.RegFunction("Single", Single);
		L.RegFunction("Delay", Delay);
		L.RegFunction("Start", Start);
		L.RegFunction("New", _CreateTimeEvent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("elapsedTime", get_elapsedTime, set_elapsedTime);
		L.RegVar("surplusTime", get_surplusTime, set_surplusTime);
		L.RegVar("elapsedcurrentTime", get_elapsedcurrentTime, set_elapsedcurrentTime);
		L.RegVar("msgObj", get_msgObj, set_msgObj);
		L.RegVar("id", get_id, set_id);
		L.RegVar("surplusTimeRound", get_surplusTimeRound, null);
		L.RegVar("elapsedTimeRound", get_elapsedTimeRound, null);
		L.RegVar("elapsedcurrentTimeRound", get_elapsedcurrentTimeRound, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateTimeEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				TimeEvent obj = new TimeEvent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: TimeEvent.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIntervalTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				TimeEvent o = obj.SetIntervalTime(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				System.Action<TimeEvent> arg1 = (System.Action<TimeEvent>)ToLua.CheckDelegate<System.Action<TimeEvent>>(L, 3);
				TimeEvent o = obj.SetIntervalTime(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TimeEvent.SetIntervalTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetInterval(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			TimeEvent o = obj.ResetInterval(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			TimeEvent o = obj.SetPause(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			System.Action<TimeEvent> arg0 = (System.Action<TimeEvent>)ToLua.CheckDelegate<System.Action<TimeEvent>>(L, 2);
			TimeEvent o = obj.OnUpdate(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			System.Action<TimeEvent> arg0 = (System.Action<TimeEvent>)ToLua.CheckDelegate<System.Action<TimeEvent>>(L, 2);
			TimeEvent o = obj.OnComplete(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnKill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			System.Action<TimeEvent> arg0 = (System.Action<TimeEvent>)ToLua.CheckDelegate<System.Action<TimeEvent>>(L, 2);
			TimeEvent o = obj.OnKill(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Single(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			TimeEvent o = obj.Single();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Delay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			TimeEvent o = obj.Delay();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TimeEvent obj = (TimeEvent)ToLua.CheckObject<TimeEvent>(L, 1);
			TimeEvent o = obj.Start();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_elapsedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			float ret = obj.elapsedTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index elapsedTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_surplusTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			float ret = obj.surplusTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index surplusTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_elapsedcurrentTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			float ret = obj.elapsedcurrentTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index elapsedcurrentTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_msgObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			UnityEngine.Object ret = obj.msgObj;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			int ret = obj.id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_surplusTimeRound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			int ret = obj.surplusTimeRound;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index surplusTimeRound on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_elapsedTimeRound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			int ret = obj.elapsedTimeRound;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index elapsedTimeRound on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_elapsedcurrentTimeRound(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			int ret = obj.elapsedcurrentTimeRound;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index elapsedcurrentTimeRound on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_elapsedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.elapsedTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index elapsedTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_surplusTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.surplusTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index surplusTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_elapsedcurrentTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.elapsedcurrentTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index elapsedcurrentTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_msgObj(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
			obj.msgObj = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgObj on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TimeEvent obj = (TimeEvent)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}
}

