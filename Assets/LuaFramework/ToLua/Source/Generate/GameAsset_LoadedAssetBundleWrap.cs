//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameAsset_LoadedAssetBundleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameAsset.LoadedAssetBundle), typeof(System.Object));
		L.RegFunction("IsLoadedAll", IsLoadedAll);
		L.RegFunction("LoadAllAssets", LoadAllAssets);
		L.RegFunction("GetAsset", GetAsset);
		L.RegFunction("Reset", Reset);
		L.RegFunction("UnloadAssetBundle", UnloadAssetBundle);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("assetBundleName", get_assetBundleName, set_assetBundleName);
		L.RegVar("assetBundle", get_assetBundle, set_assetBundle);
		L.RegVar("assetObjects", get_assetObjects, set_assetObjects);
		L.RegVar("cacheGameObject", get_cacheGameObject, set_cacheGameObject);
		L.RegVar("dependAssetBundles", get_dependAssetBundles, set_dependAssetBundles);
		L.RegVar("referencedCount", get_referencedCount, set_referencedCount);
		L.RegVar("isLoaded", get_isLoaded, set_isLoaded);
		L.RegVar("erroMsg", get_erroMsg, set_erroMsg);
		L.RegVar("onLoaded", get_onLoaded, set_onLoaded);
		L.RegVar("asyncLoad", get_asyncLoad, set_asyncLoad);
		L.RegVar("isAsyncLoading", get_isAsyncLoading, set_isAsyncLoading);
		L.RegVar("isStatic", get_isStatic, set_isStatic);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoadedAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)ToLua.CheckObject<GameAsset.LoadedAssetBundle>(L, 1);
			bool o = obj.IsLoadedAll();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)ToLua.CheckObject<GameAsset.LoadedAssetBundle>(L, 1);
			obj.LoadAllAssets();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)ToLua.CheckObject<GameAsset.LoadedAssetBundle>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			UnityEngine.Object o = obj.GetAsset(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)ToLua.CheckObject<GameAsset.LoadedAssetBundle>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAssetBundle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)ToLua.CheckObject<GameAsset.LoadedAssetBundle>(L, 1);
				obj.UnloadAssetBundle();
				return 0;
			}
			else if (count == 2)
			{
				GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)ToLua.CheckObject<GameAsset.LoadedAssetBundle>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.UnloadAssetBundle(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameAsset.LoadedAssetBundle.UnloadAssetBundle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetBundleName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			string ret = obj.assetBundleName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetBundleName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			UnityEngine.AssetBundle ret = obj.assetBundle;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetObjects(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			System.Collections.Generic.Dictionary<string,UnityEngine.Object> ret = obj.assetObjects;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetObjects on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cacheGameObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			UnityEngine.GameObject ret = obj.cacheGameObject;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cacheGameObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dependAssetBundles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			GameAsset.LoadedAssetBundle[] ret = obj.dependAssetBundles;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dependAssetBundles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_referencedCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			int ret = obj.referencedCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index referencedCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isLoaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool ret = obj.isLoaded;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isLoaded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_erroMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			string ret = obj.erroMsg;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erroMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onLoaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			System.Action ret = obj.onLoaded;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onLoaded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_asyncLoad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool ret = obj.asyncLoad;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index asyncLoad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isAsyncLoading(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool ret = obj.isAsyncLoading;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isAsyncLoading on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isStatic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool ret = obj.isStatic;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isStatic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetBundleName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.assetBundleName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetBundleName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			UnityEngine.AssetBundle arg0 = (UnityEngine.AssetBundle)ToLua.CheckObject(L, 2, typeof(UnityEngine.AssetBundle));
			obj.assetBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetBundle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetObjects(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			System.Collections.Generic.Dictionary<string,UnityEngine.Object> arg0 = (System.Collections.Generic.Dictionary<string,UnityEngine.Object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,UnityEngine.Object>));
			obj.assetObjects = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetObjects on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cacheGameObject(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.cacheGameObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cacheGameObject on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dependAssetBundles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			GameAsset.LoadedAssetBundle[] arg0 = ToLua.CheckObjectArray<GameAsset.LoadedAssetBundle>(L, 2);
			obj.dependAssetBundles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dependAssetBundles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_referencedCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.referencedCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index referencedCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isLoaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isLoaded = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isLoaded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_erroMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.erroMsg = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index erroMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onLoaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.onLoaded = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onLoaded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_asyncLoad(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.asyncLoad = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index asyncLoad on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isAsyncLoading(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isAsyncLoading = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isAsyncLoading on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isStatic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameAsset.LoadedAssetBundle obj = (GameAsset.LoadedAssetBundle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isStatic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isStatic on a nil value");
		}
	}
}

