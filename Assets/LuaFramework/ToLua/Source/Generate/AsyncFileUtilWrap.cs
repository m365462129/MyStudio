//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AsyncFileUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("AsyncFileUtil");
		L.RegFunction("StartFileOperationThread", StartFileOperationThread);
		L.RegFunction("EndFileOperationTread", EndFileOperationTread);
		L.RegFunction("AddFileOperationToQueue", AddFileOperationToQueue);
		L.RegFunction("GetFinishedAsyncFileOperationData", GetFinishedAsyncFileOperationData);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartFileOperationThread(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AsyncFileUtil.StartFileOperationThread();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndFileOperationTread(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AsyncFileUtil.EndFileOperationTread();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFileOperationToQueue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				AsyncFileUtil.AddFileOperationToQueue(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				AsyncFileUtil.AddFileOperationToQueue(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				string arg4 = ToLua.CheckString(L, 5);
				AsyncFileUtil.AddFileOperationToQueue(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AsyncFileUtil.AddFileOperationToQueue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFinishedAsyncFileOperationData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			AsyncFileOperationData o = AsyncFileUtil.GetFinishedAsyncFileOperationData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

