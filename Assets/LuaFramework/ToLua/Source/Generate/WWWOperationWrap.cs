//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WWWOperationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WWWOperation), typeof(System.Object));
		L.RegFunction("Subscribe", Subscribe);
		L.RegFunction("SubscribeWithProgress", SubscribeWithProgress);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("www", get_www, set_www);
		L.RegVar("error", get_error, null);
		L.RegVar("text", get_text, null);
		L.RegVar("texture", get_texture, null);
		L.RegVar("isBreak", get_isBreak, set_isBreak);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Subscribe(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				WWWOperation obj = (WWWOperation)ToLua.CheckObject<WWWOperation>(L, 1);
				System.Action<WWWOperation> arg0 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 2);
				WWWOperation o = obj.Subscribe(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				WWWOperation obj = (WWWOperation)ToLua.CheckObject<WWWOperation>(L, 1);
				System.Action<WWWOperation> arg0 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 2);
				System.Action<WWWOperation> arg1 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 3);
				WWWOperation o = obj.Subscribe(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWOperation.Subscribe");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubscribeWithProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				WWWOperation obj = (WWWOperation)ToLua.CheckObject<WWWOperation>(L, 1);
				System.Action<WWWOperation> arg0 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 2);
				WWWOperation o = obj.SubscribeWithProgress(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				WWWOperation obj = (WWWOperation)ToLua.CheckObject<WWWOperation>(L, 1);
				System.Action<WWWOperation> arg0 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 2);
				System.Action<WWWOperation> arg1 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 3);
				WWWOperation o = obj.SubscribeWithProgress(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				WWWOperation obj = (WWWOperation)ToLua.CheckObject<WWWOperation>(L, 1);
				System.Action<WWWOperation> arg0 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 2);
				System.Action<WWWOperation> arg1 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 3);
				System.Action<WWWOperation> arg2 = (System.Action<WWWOperation>)ToLua.CheckDelegate<System.Action<WWWOperation>>(L, 4);
				WWWOperation o = obj.SubscribeWithProgress(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWOperation.SubscribeWithProgress");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_www(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			UnityEngine.WWW ret = obj.www;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index www on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			string ret = obj.error;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_text(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			string ret = obj.text;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index text on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			UnityEngine.Texture ret = obj.texture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBreak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			bool ret = obj.isBreak;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isBreak on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_www(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			UnityEngine.WWW arg0 = (UnityEngine.WWW)ToLua.CheckObject<UnityEngine.WWW>(L, 2);
			obj.www = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index www on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isBreak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WWWOperation obj = (WWWOperation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isBreak = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isBreak on a nil value");
		}
	}
}

